{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arbog\\\\Documents\\\\workshop_app_frontend\\\\front-end\\\\src\\\\Components\\\\Admin\\\\NewNotification.js\";\nimport React from \"react\";\nimport NotificationForm from \"./NewNotificationSubComponents/NotificationForm\";\nimport TempNotification from \"./NewNotificationSubComponents/TempNotification\";\nimport { useContext, useState } from \"react\";\nimport { NotificationContext } from \"../../Context/NotificationContext\";\nimport { Link } from \"react-router-dom\";\nimport \"./NewNotification.scss\";\nimport ModalForm from \"./Modals/ModalForm\";\n\nconst NewNotification = () => {\n  const {\n    tempNotifications,\n    confirmNotification,\n    setTempNotifications,\n    deleteTempNotification\n  } = useContext(NotificationContext);\n  const [isModalDisplayed, setIsModalDisplayed] = useState(false);\n  const [active, setActive] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [notificationId, setNotificationId] = useState(\"\");\n\n  const toggleDisplayModal = (activeModal, modalContent, notification_id) => {\n    setNotificationId(notification_id);\n    setContent(modalContent);\n    setActive(activeModal);\n    setIsModalDisplayed(!isModalDisplayed);\n\n    if (activeModal === \"message\") {\n      setTimeout(() => setIsModalDisplayed(false), 1500);\n    }\n  };\n\n  const handleConfirmAllNotifications = () => tempNotifications.map(tempNotification => {\n    let to_id = null;\n\n    switch (tempNotification.to) {\n      case \"All\":\n        to_id = 1;\n        break;\n\n      case \"All Attendees\":\n        to_id = 2;\n        break;\n\n      case \"All Speakers\":\n        to_id = 3;\n        break;\n    }\n\n    const newObject = {\n      subject: tempNotification.subject,\n      content: tempNotification.content,\n      state: tempNotification.state,\n      send_to_id: to_id,\n      date: tempNotification.date\n    };\n    confirmNotification(newObject);\n    setTempNotifications([]);\n  });\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"new-notifications-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"new-notifications-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"New Notification\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"all-notifications-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/admin/all-notifications\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, \"All Notifications\")), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"confirm-all-btn\",\n    onClick: handleConfirmAllNotifications,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, \"Confirm All\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, isModalDisplayed && /*#__PURE__*/React.createElement(ModalForm, {\n    active: active,\n    toggleDisplayModal: toggleDisplayModal,\n    confirmFunction: deleteTempNotification,\n    id: notificationId,\n    confirmText: \"confirm\",\n    content: content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }))), tempNotifications.map(tempNotification => {\n    return /*#__PURE__*/React.createElement(TempNotification, {\n      key: tempNotification.id,\n      tempNotification: tempNotification,\n      toggleDisplayModal: toggleDisplayModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    });\n  }), /*#__PURE__*/React.createElement(NotificationForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default NewNotification; // add: send now or send later\n//action should be done before confirm stage\n//action will be done when confirming\n//either store the notification or send the email\n//needs to be talked about with Connor","map":{"version":3,"sources":["C:/Users/arbog/Documents/workshop_app_frontend/front-end/src/Components/Admin/NewNotification.js"],"names":["React","NotificationForm","TempNotification","useContext","useState","NotificationContext","Link","ModalForm","NewNotification","tempNotifications","confirmNotification","setTempNotifications","deleteTempNotification","isModalDisplayed","setIsModalDisplayed","active","setActive","content","setContent","notificationId","setNotificationId","toggleDisplayModal","activeModal","modalContent","notification_id","setTimeout","handleConfirmAllNotifications","map","tempNotification","to_id","to","newObject","subject","state","send_to_id","date","id"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport NotificationForm from \"./NewNotificationSubComponents/NotificationForm\";\r\nimport TempNotification from \"./NewNotificationSubComponents/TempNotification\";\r\nimport { useContext, useState } from \"react\";\r\nimport { NotificationContext } from \"../../Context/NotificationContext\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./NewNotification.scss\";\r\nimport ModalForm from \"./Modals/ModalForm\";\r\n\r\nconst NewNotification = () => {\r\n  const {\r\n    tempNotifications,\r\n    confirmNotification,\r\n    setTempNotifications,\r\n    deleteTempNotification\r\n  } = useContext(NotificationContext);\r\n\r\n  const [isModalDisplayed, setIsModalDisplayed] = useState(false);\r\n  const [active, setActive] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const [notificationId, setNotificationId] = useState(\"\");\r\n\r\n  const toggleDisplayModal = (activeModal, modalContent, notification_id) => {\r\n    setNotificationId(notification_id)\r\n    setContent(modalContent)\r\n    setActive(activeModal)\r\n    setIsModalDisplayed(!isModalDisplayed);\r\n    if(activeModal === \"message\"){\r\n      setTimeout(() => setIsModalDisplayed(false), 1500);\r\n    }\r\n  };\r\n\r\n  const handleConfirmAllNotifications = () =>\r\n    tempNotifications.map((tempNotification) => {\r\n      let to_id = null;\r\n\r\n      switch (tempNotification.to) {\r\n        case \"All\":\r\n          to_id = 1;\r\n          break;\r\n        case \"All Attendees\":\r\n          to_id = 2;\r\n          break;\r\n        case \"All Speakers\":\r\n          to_id = 3;\r\n          break;\r\n      }\r\n\r\n      const newObject = {\r\n        subject: tempNotification.subject,\r\n        content: tempNotification.content,\r\n        state: tempNotification.state,\r\n        send_to_id: to_id,\r\n        date: tempNotification.date,\r\n      };\r\n\r\n      confirmNotification(newObject);\r\n      setTempNotifications([]);\r\n    });\r\n\r\n  return (\r\n    <div className=\"new-notifications-body\">\r\n      <div className=\"new-notifications-header\">\r\n        <h1>New Notification</h1>\r\n        <button className='all-notifications-btn'>\r\n          <Link to='/admin/all-notifications'>All Notifications</Link>\r\n\r\n        </button>\r\n        <button\r\n          className=\"confirm-all-btn\"\r\n          onClick={handleConfirmAllNotifications}\r\n        >\r\n          Confirm All\r\n        </button>\r\n        <div>\r\n        {isModalDisplayed && (\r\n            <ModalForm active={active} toggleDisplayModal={toggleDisplayModal} confirmFunction={deleteTempNotification} id={notificationId} confirmText={\"confirm\"} content={content} />\r\n          )}\r\n        </div>\r\n      </div>\r\n      {tempNotifications.map((tempNotification) => {\r\n        return (\r\n          <TempNotification\r\n            key={tempNotification.id}\r\n            tempNotification={tempNotification}\r\n            toggleDisplayModal={toggleDisplayModal}\r\n          />\r\n        );\r\n      })}\r\n      <NotificationForm />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewNotification;\r\n\r\n// add: send now or send later\r\n//action should be done before confirm stage\r\n//action will be done when confirming\r\n//either store the notification or send the email\r\n//needs to be talked about with Connor\r\n"]},"metadata":{},"sourceType":"module"}