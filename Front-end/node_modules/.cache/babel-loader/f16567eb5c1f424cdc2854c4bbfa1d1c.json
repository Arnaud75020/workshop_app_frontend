{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arbog\\\\Documents\\\\workshop_app_frontend\\\\front-end\\\\src\\\\Context\\\\NotificationContext.js\";\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nexport const NotificationContext = createContext();\n\nconst NotificationContextProvider = props => {\n  const [notifications, setNotifications] = useState([]);\n  const [tempNotifications, setTempNotifications] = useState([]);\n  const [allNotifications, setAllNotifications] = useState([]);\n  const [searchNotificationValue, setSearchNotificationValue] = useState([]);\n  const [stateFilter, setStateFilter] = useState(\"All notifications\");\n  useEffect(() => {\n    getNotifications();\n  }, []);\n\n  const getNotifications = () => {\n    axios.get('/notifications').then(response => response.data).then(notificationsList => {\n      setNotifications(notificationsList);\n      setAllNotifications(notificationsList);\n    });\n  };\n\n  const addTempNotification = newObject => {\n    console.log(newObject);\n    setTempNotifications([...tempNotifications, newObject]);\n  };\n\n  const confirmNotification = newObject => {\n    console.log(\"newObject\", newObject);\n    axios.post('/notifications', newObject);\n    getNotifications();\n  };\n\n  const editNotification = newObject => {\n    const notificationsList = [...tempNotifications];\n    const i = notificationsList.findIndex(notification => notification.id === newObject.id);\n    notificationsList.splice(i, 1, newObject);\n    setTempNotifications(notificationsList);\n  };\n\n  const deleteTempNotification = id => {\n    const notificationList = tempNotifications.filter(notification => notification.id !== id);\n    setTempNotifications(notificationList);\n  };\n\n  const deleteNotification = id => {\n    axios.delete(`/notifications/${id}`);\n    getNotifications();\n  };\n\n  const handleFilterState = event => {\n    const {\n      value\n    } = event.target;\n\n    if (value === \"All notifications\") {\n      setStateFilter(value);\n      setNotifications(allNotifications);\n    } else {\n      const filterdNotifications = allNotifications.filter(notification => {\n        const notificationState = notification.state;\n        return notificationState === value;\n      });\n      setStateFilter(value);\n      setNotifications(filterdNotifications);\n      setSearchNotificationValue(\"\");\n    }\n\n    ;\n  };\n\n  const handleNotificationSearch = event => {\n    const {\n      value\n    } = event.target;\n\n    if (value.length) {\n      const filteredNotifications = allNotifications.filter(notification => {\n        return notification.subject.toLowerCase().includes(value.toLowerCase());\n      });\n      setSearchNotificationValue(value);\n      setNotifications(filteredNotifications);\n      setStateFilter(\"All notifications\");\n    } else {\n      setSearchNotificationValue(value);\n      setNotifications(allNotifications);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NotificationContext.Provider, {\n    value: {\n      notifications,\n      tempNotifications,\n      addTempNotification,\n      confirmNotification,\n      allNotifications,\n      deleteTempNotification,\n      editNotification,\n      setTempNotifications,\n      handleFilterState,\n      stateFilter,\n      handleNotificationSearch,\n      searchNotificationValue,\n      deleteNotification\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, props.children));\n};\n\nexport default NotificationContextProvider;","map":{"version":3,"sources":["C:/Users/arbog/Documents/workshop_app_frontend/front-end/src/Context/NotificationContext.js"],"names":["React","createContext","useState","useEffect","axios","NotificationContext","NotificationContextProvider","props","notifications","setNotifications","tempNotifications","setTempNotifications","allNotifications","setAllNotifications","searchNotificationValue","setSearchNotificationValue","stateFilter","setStateFilter","getNotifications","get","then","response","data","notificationsList","addTempNotification","newObject","console","log","confirmNotification","post","editNotification","i","findIndex","notification","id","splice","deleteTempNotification","notificationList","filter","deleteNotification","delete","handleFilterState","event","value","target","filterdNotifications","notificationState","state","handleNotificationSearch","length","filteredNotifications","subject","toLowerCase","includes","children"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const NotificationContext = createContext();\r\n\r\nconst NotificationContextProvider = (props) => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [tempNotifications, setTempNotifications] = useState([]);\r\n  const [allNotifications, setAllNotifications] = useState([]);\r\n  const [searchNotificationValue, setSearchNotificationValue] = useState([]);\r\n  const [stateFilter, setStateFilter] = useState(\"All notifications\");\r\n\r\n  useEffect(() => {\r\n    getNotifications();\r\n  }, []);\r\n\r\n  const getNotifications = () => {\r\n    axios\r\n      .get('/notifications')\r\n      .then((response) => response.data)\r\n      .then((notificationsList) => {\r\n        setNotifications(notificationsList);\r\n        setAllNotifications(notificationsList);\r\n      });\r\n  };\r\n\r\n  const addTempNotification = (newObject) => {\r\n    console.log(newObject)\r\n    setTempNotifications([...tempNotifications, newObject]);\r\n  };\r\n\r\n  const confirmNotification = (newObject) => {\r\n    console.log(\"newObject\", newObject)\r\n    axios\r\n      .post('/notifications', newObject)\r\n\r\n    getNotifications();\r\n  };\r\n\r\n  const editNotification = (newObject) => {\r\n    const notificationsList = [...tempNotifications];\r\n    const i = notificationsList.findIndex(\r\n      (notification) => notification.id === newObject.id\r\n    );\r\n    notificationsList.splice(i, 1, newObject);\r\n    setTempNotifications(notificationsList);\r\n};\r\n\r\n  const deleteTempNotification = (id) => {\r\n    const notificationList = tempNotifications.filter(\r\n      (notification) => notification.id !== id\r\n    );\r\n    setTempNotifications(notificationList);\r\n  };\r\n\r\n  const deleteNotification = (id) => {\r\n    axios\r\n      .delete(`/notifications/${id}`)\r\n\r\n      getNotifications()\r\n  }\r\n\r\n  const handleFilterState = (event) => {\r\n\r\n    const { value } = event.target;\r\n\r\n      if (value === \"All notifications\") {\r\n        setStateFilter(value)\r\n        setNotifications(allNotifications);\r\n      } else {\r\n        const filterdNotifications = allNotifications.filter((notification) => {\r\n          const notificationState = notification.state;\r\n          return notificationState === value;\r\n        });\r\n        setStateFilter(value)\r\n        setNotifications(filterdNotifications);\r\n        setSearchNotificationValue(\"\")\r\n      };\r\n  };\r\n\r\n  const handleNotificationSearch = (event) => {\r\n    const { value } = event.target;\r\n    if (value.length) {\r\n      const filteredNotifications = allNotifications.filter((notification) => {\r\n        return (\r\n          notification.subject.toLowerCase().includes(value.toLowerCase())\r\n        );\r\n      });\r\n      setSearchNotificationValue(value);\r\n      setNotifications(filteredNotifications);\r\n      setStateFilter(\"All notifications\")\r\n    } else {\r\n      setSearchNotificationValue(value);\r\n      setNotifications(allNotifications);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NotificationContext.Provider\r\n        value={{\r\n          notifications,\r\n          tempNotifications,\r\n          addTempNotification,\r\n          confirmNotification,\r\n          allNotifications,\r\n          deleteTempNotification,\r\n          editNotification,\r\n          setTempNotifications,\r\n          handleFilterState,\r\n          stateFilter,\r\n          handleNotificationSearch,\r\n          searchNotificationValue,\r\n          deleteNotification\r\n        }}>\r\n        {props.children}\r\n      </NotificationContext.Provider>\r\n    </div>\r\n  );\r\n};\r\nexport default NotificationContextProvider;\r\n"]},"metadata":{},"sourceType":"module"}